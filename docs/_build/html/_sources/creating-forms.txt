Creating forms
===============

The forms are configured using Jade files placed in the "forms" folder; simply placing a file in this folder will cause it to be recognized, provided that the filename matches the regular expression ``/^[A-za-z0-9_-]+\.jade$/``. Example forms are provided with the installation.

The forms are written in Jade; internally, this is compiled to XML, then converted into objects, then rendered (via `HTMLGenerator`) into the HTML that is displayed to the user.

The basic structure of a form configuration file is as follows:

.. code-block:: jade

	form(name='Title of form')
		fields
			//- a list of headers, form fields, etc. to be put into the form
		outputs
			//- specifies where the data from the form will be stored
		views
			//- a list of ways in which the output of the form can be viewed

Parts of forms
---------------

The following section describes each of the elements that can be nested within the "fields" element described above. Each of these elements corresponds to a form field (or possibly a group of form fields).

Global attributes
+++++++++++++++++

.. describe:: Global attributes

	A few global attributes are shared by most (*not necessarily all*) of the elements that describe form fields.

	.. option:: name

		This attribute assigns a name to a form field. It will be used as the HTML "name" attribute in the generated form, and as the key in MongoDB.

		Note that this attribute **must** be unique within the form (no two fields can have the same name). Violating this rule will result in undefined (and likely problematic) behavior.

	.. option:: label

		This attribute specifies the label that goes above the form field.

	.. option:: sublabel

		This attribute specifies a piece of smaller text to be rendered below the main label.

		In some cases, the ``sublabel`` will be generated from the validation-related attributes of the form field if it is not explicitly specified.

	.. option:: required

		If provided, this attribute specifies that a value for the field must be provided by the user.

Form fields
++++++++++++++++++++++++++++++

.. object:: checkbox

	This element creates a checkbox.

	.. option:: must-check

		If this attribute is specified, the checkbox must be checked or the user will be unable to submit the form.

.. object:: textbox
.. object:: textarea

	These elements create single-line and multi-line text boxes, respectively.

	.. option:: min-length, max-length

		These specify the minimum and maximum number of characters that can be entered, respectively.

	.. option:: must-match

		Specifies a regular expression which the text must match.

.. object:: password

	This element creates a password input field.

	.. option:: match-hash

		Specifies a salted and hashed password, made with PHP's password_hash function, which the entered password must match.

.. object:: dropdown
.. object:: radios

	These element create dropdown menus and lists of radio buttons, respectively. Child `option` elements are used to create the list of available options.


.. object:: checkboxes

	This element creates a list of checkboxes, so that the user can select multiple options from a set. Child `option` elements are used to create the list of available options.

	.. option:: min-choices, max-choices

		These specify the minimum and maximum number of choices that the user can make.

.. object:: range

	The `range` element creates a slider; it is useful for choosing numeric values within a range.

	.. option:: min, max

		These specify the minimum and maximum values for the slider.

	.. option:: def

		Specifies the default value of the slider.

	.. option:: step

		Specifies the increments along the slider; for example, if this is set to 1, only integers can be provided.

.. object:: phone
.. object:: email
.. object:: url

	These elements provide boxes in which the user can input phone numbers, email addresses, and URLs, respectively.

	.. option:: must-have-domain

	For the ``email`` element, this attribute requires that the email address be at a specific domain.

.. object:: number

	Allows the user to input a numeric value.

	.. option:: min, max

		These specify the minimum and maximum values of the number.

	.. option: integer

		If specified, only integers will be accepted.

.. object:: time

	Allows the user to specify a time of day.

	.. option:: min, max

		These specify, in "h:mm xm" format, the minimum and maximum times that can be entered.

	.. option:: step

		If specified, the time (measured in minutes past midnight) must be a multiple of this number of minutes.

.. object:: date

	Allows the user to specify a date.

	.. option:: min, max

		These specify, in "YYYY-MM-DD" format, the minimum and maximum dates that can be entered.

.. object:: datetime

	Allows the user to specify a date and time.

	.. option:: min, max

		These specify, in "m/d/y hh:mm xm" format, the minimum and maximum values that can be entered.

	.. option:: step

		If specified, the time (measured in minutes past midnight) must be a multiple of this number of minutes.

.. object:: file

	Allows the user to upload a file.

	`allow` elements nested inside of the `file` element specify what types of files are allowed; each `allow` element corresponds to a single file type. The `mime` attribute specifies the MIME type; the `ext` attribute specifies the file extension.

	.. option:: max-size

		The maximum file size, in bytes. Note that the file size limit set in ``php.ini`` will override this.

	.. option:: permissions

		The permissions which the file will have in Amazon S3. ``public-read`` is probably what you want.

.. object:: group

	Creates a border around a group of related form fields. Does not affect the data sent to MongoDB (or other sources) in any way.

.. object:: captcha

	Creates a CAPTCHA, which the user must solve in order for the form to be submitted.

.. object:: list

	Allows the user to duplicate a set of form fields an arbitrary number of times. For example, to create a list of file uploads with associated captions, one might use:

	.. code-block:: jade

	    list(name='pictures', label='Pictures to upload', add-text='Add a picture', min-items='2')
	      file(label='Image file', name='image_file', max-size='10000000', permissions='public-read')
	        allow(ext='jpg', mime='image/jpeg')
	        allow(ext='png', mime='image/png')
	      textbox(label='Caption', name='caption', required=true)